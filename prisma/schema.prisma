// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Role {
    READER
    REPORTER
    ADMIN
}

model User {
    id            String    @id @default(cuid())
    fullName      String?   @db.VarChar(100)
    email         String?   @unique
    emailVerified DateTime?
    acceptedTOS   Boolean   @default(false)
    image         String?
    role          Role      @default(READER)
    accounts      Account[]
    sessions      Session[]
    articles      Article[]
    comments      Comment[]
    likes         Like[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Category {
    id          String   @id @default(uuid())
    name        String   @unique
    description String?  @db.VarChar(255)
    created_at  DateTime @default(now())
    updated_at  DateTime @updatedAt

    articles Article[]
}

model Article {
    id           String    @id @default(uuid())
    title        String
    slug         String    @unique
    content      String    @db.MediumText
    image_url    String
    author_id    String
    category_id  String
    is_published Boolean
    published_at DateTime?
    created_at   DateTime  @default(now())
    updated_at   DateTime  @updatedAt

    author   User         @relation(fields: [author_id], references: [id])
    category Category     @relation(fields: [category_id], references: [id])
    comments Comment[]
    tags     ArticleTag[]
    likes    Like[]
}

model Comment {
    id         String   @id @default(uuid())
    content    String   @db.VarChar(1200)
    user_id    String
    article_id String
    parent_id  String? // Menambahkan referensi ke parent comment (nullable)
    created_at DateTime @default(now())
    updated_at DateTime @updatedAt

    user    User    @relation(fields: [user_id], references: [id])
    article Article @relation(fields: [article_id], references: [id])

    parent  Comment?  @relation("CommentReplies", fields: [parent_id], references: [id]) // Relasi ke komentar utama
    replies Comment[] @relation("CommentReplies") // Relasi ke balasan komentar
}

model Tag {
    id         String   @id @default(uuid())
    name       String   @unique @db.VarChar(50)
    created_at DateTime @default(now())
    updated_at DateTime @updatedAt

    articles ArticleTag[]
}

model ArticleTag {
    id         String @id @default(uuid())
    article_id String
    tag_id     String

    article Article @relation(fields: [article_id], references: [id])
    tag     Tag     @relation(fields: [tag_id], references: [id])
}

model Like {
    id         String   @id @default(uuid())
    user_id    String
    article_id String
    created_at DateTime @default(now())

    user    User    @relation(fields: [user_id], references: [id])
    article Article @relation(fields: [article_id], references: [id])

    @@unique([user_id, article_id]) // Mencegah user memberikan lebih dari satu like per artikel
}
